Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
fname = "../../data/synthetic/results/online/synthetic_2_R_"
fname = paste(fname, limit, sep="")
fname = paste(fname, ".csv", sep="")
write.table(results, fname,
row.names = FALSE, sep = ",")
}
library(EpiEstim)
library(caTools)
library(tidyverse)
files.sources = list.files(".")
files.sources <- files.sources[!str_detect(files.sources, "vignette")]
files.sources <- files.sources[!str_detect(files.sources, "data")]
files.sources <- files.sources[!str_detect(files.sources, "plots")]
for (i in 1:length(files.sources)) {
source(paste0(c(files.sources[i]), collapse = ''))
}
df <- read.csv("../../data/synthetic/synthetic1_dropoff.csv")
I <- df$cases
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
nflu = nrow(df)
tflu = n_prev_cases + df$day
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day,
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/synthetic/results/synthetic_1_R.csv",
row.names = FALSE, sep = ",")
df <- read.csv("../../data/synthetic/synthetic3_slowdropoff.csv")
I <- df$cases
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
nflu = nrow(df)
tflu = n_prev_cases + df$day
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day,
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/synthetic/results/synthetic_3_R.csv",
row.names = FALSE, sep = ",")
df <- read.csv("../../data/synthetic/synthetic2_resurgence.csv")
I <- df$cases
gen = read.csv('../../data/synthetic/ebola_serial_interval.csv', header = F)
n_prev_cases <- 50
w <- gen$V1[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(5, n_prev_cases)
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths: start on day after first day as otherwise lambda is zero on first two days causing NAs
start_day <- 2
nflu = nrow(df) - start_day
tflu = n_prev_cases + df$day+ start_day
tflu = tflu[1:(length(tflu) - start_day)]
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/synthetic/results/synthetic_2_R.csv",
row.names = FALSE, sep = ",")
library(EpiEstim)
library(caTools)
library(tidyverse)
files.sources = list.files(".")
files.sources <- files.sources[!str_detect(files.sources, "vignette")]
files.sources <- files.sources[!str_detect(files.sources, "data")]
files.sources <- files.sources[!str_detect(files.sources, "plots")]
for (i in 1:length(files.sources)) {
source(paste0(c(files.sources[i]), collapse = ''))
}
df <- read.csv("../../data/synthetic/supp_synth1.csv")
library(EpiEstim)
library(caTools)
library(tidyverse)
files.sources = list.files(".")
files.sources <- files.sources[!str_detect(files.sources, "vignette")]
files.sources <- files.sources[!str_detect(files.sources, "data")]
files.sources <- files.sources[!str_detect(files.sources, "plots")]
for (i in 1:length(files.sources)) {
source(paste0(c(files.sources[i]), collapse = ''))
}
df <- read.csv("../../data/synthetic/synthetic4_lownoise.csv")
I <- df$cases
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
nflu = nrow(df)
tflu = n_prev_cases + df$day
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day,
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/synthetic/results/supp_synthetic_1_R.csv",
row.names = FALSE, sep = ",")
df <- read.csv("../../data/synthetic/synthetic5_highnoise.csv")
I <- df$cases
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
nflu = nrow(df)
tflu = n_prev_cases + df$day
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day,
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/synthetic/results/supp_synthetic_2_R.csv",
row.names = FALSE, sep = ",")
df <- read.csv("../../data/synthetic/synthetic6_sine.csv")
I <- df$cases
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
nflu = nrow(df)
tflu = n_prev_cases + df$day
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day,
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/synthetic/results/supp_synthetic_3_R.csv",
row.names = FALSE, sep = ",")
library(EpiEstim)
library(caTools)
library(tidyverse)
files.sources = list.files(".")
files.sources <- files.sources[!str_detect(files.sources, "vignette")]
files.sources <- files.sources[!str_detect(files.sources, "data")]
files.sources <- files.sources[!str_detect(files.sources, "plots")]
for (i in 1:length(files.sources)) {
source(paste0(c(files.sources[i]), collapse = ''))
}
kappas = c("100", "10", "1", "0.1")
for(kappa in kappas){
fname = sprintf("../../data/synthetic/negbin_%s.csv", kappa)
df <- read.csv(fname)
I <- df$cases
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths: start on day after first day as otherwise lambda is zero on first two days causing NAs
start_day <- 2
nflu = nrow(df) - start_day
tflu = n_prev_cases + df$day+ start_day
tflu = tflu[1:(length(tflu) - start_day)]
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
fname = sprintf("../../data/synthetic/results/nb/nb_%s.csv", kappa)
write.table(results, fname,
row.names = FALSE, sep = ",")
}
library(EpiEstim)
library(caTools)
library(tidyverse)
files.sources = list.files(".")
files.sources <- files.sources[!str_detect(files.sources, "vignette")]
files.sources <- files.sources[!str_detect(files.sources, "data")]
files.sources <- files.sources[!str_detect(files.sources, "plots")]
for (i in 1:length(files.sources)) {
source(paste0(c(files.sources[i]), collapse = ''))
}
kappas = c("100", "10", "1", "0.5")
for(kappa in kappas){
fname = sprintf("../../data/synthetic/negbin_%s.csv", kappa)
df <- read.csv(fname)
I <- df$cases
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 20
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I_prev[length(I_prev)] = 5
I_prev[length(I_prev)-1] = 5
I_prev[length(I_prev)-2] = 5
I <- c(I_prev, I)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths: start on day after first day as otherwise lambda is zero on first two days causing NAs
start_day <- 2
nflu = nrow(df) - start_day
tflu = n_prev_cases + df$day+ start_day
tflu = tflu[1:(length(tflu) - start_day)]
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$day[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
fname = sprintf("../../data/synthetic/results/nb/nb_%s.csv", kappa)
write.table(results, fname,
row.names = FALSE, sep = ",")
}
library(EpiEstim)
library(caTools)
library(tidyverse)
files.sources = list.files(".")
files.sources <- files.sources[!str_detect(files.sources, "vignette")]
files.sources <- files.sources[!str_detect(files.sources, "data")]
files.sources <- files.sources[!str_detect(files.sources, "plots")]
for (i in 1:length(files.sources)) {
source(paste0(c(files.sources[i]), collapse = ''))
}
df <- read.csv("../../data/covid/VIC.csv")
I <- df$Incidence_Number
I_imp <- df$Imported_Cases
eps <- 1.0
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 14
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I <- c(I_prev, I)
I_imp <- c(I_prev, I_imp)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)] + eps * I_imp[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
start_day <- 2
nflu = nrow(df) - start_day
tflu = n_prev_cases + df$Time+ start_day
tflu = tflu[1:(length(tflu) - start_day)]
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$Time[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/covid/results/VIC_R.csv",
row.names = FALSE, sep = ",")
df <- read.csv("../../data/covid/QLD.csv")
I <- df$Incidence_Number
I_imp <- df$Imported_Cases
eps <- 1.0
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 14
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I <- c(I_prev, I)
I_imp <- c(I_prev, I_imp)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)] + eps * I_imp[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
start_day <- 2
nflu = nrow(df) - start_day
tflu = n_prev_cases + df$Time+ start_day
tflu = tflu[1:(length(tflu) - start_day)]
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$Time[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/covid/results/QLD_R.csv",
row.names = FALSE, sep = ",")
df <- read.csv("../../data/covid/HK.csv")
I <- df$Incidence_Number
I_imp <- df$Imported_Cases
eps <- 0.2
gen = read.csv('../../data/raw/covid_serial_interval.csv')
n_prev_cases <- 14
w <- gen$w[1:n_prev_cases]
w <- w / sum(w)
lambda <- vector(length = length(I))
I_prev = rep(0, n_prev_cases)
I <- c(I_prev, I)
I_imp <- c(I_prev, I_imp)
for(i in seq_along(lambda)) {
I_past <- rev(I[i:(i + n_prev_cases - 1)] + eps * I_imp[i:(i + n_prev_cases - 1)])
lambda[i] <- sum(w * I_past)
}
lambda <- c(rep(0, n_prev_cases), lambda)
Rprior = c(1, 2); a = 0.05
# Setup grid and noise parameters
Rmin = 0.01; Rmax = 10; eta = 0.1
# Uniform prior over grid of size m
m = 1000; pR0 = (1/m)*rep(1, m)
# Delimited grid defining space of R
Rgrid = seq(Rmin, Rmax, length.out = m)
# Time series lengths
start_day <- 2
nflu = nrow(df) - start_day
tflu = n_prev_cases + df$Time+ start_day
tflu = tflu[1:(length(tflu) - start_day)]
Rfilt_flu = epiFilter(Rgrid, m, eta, pR0, nflu, lambda[tflu], I[tflu], a)
Rsmooth_flu = epiSmoother(Rgrid, m, Rfilt_flu[[4]], Rfilt_flu[[5]], nflu, Rfilt_flu[[6]], a)
results <- tibble(day=df$Time[start_day:(nflu + 1)],
R_filt=Rfilt_flu[[3]],
R_filt_lower_bound=Rfilt_flu[[2]][1,],
R_filt_upper_bound=Rfilt_flu[[2]][2,],
R_smooth=Rsmooth_flu[[3]],
R_smooth_lower_bound=Rsmooth_flu[[2]][1,],
R_smooth_upper_bound=Rsmooth_flu[[2]][2,])
write.table(results, "../../data/covid/results/HK_R.csv",
row.names = FALSE, sep = ",")
